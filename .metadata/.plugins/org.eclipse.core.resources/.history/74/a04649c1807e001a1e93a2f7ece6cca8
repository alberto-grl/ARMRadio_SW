/**
  ******************************************************************************
  * @file    ADC_DualModeInterleaved/main.h 
  * @author  MCD Application Team
  * @version V1.0.1
  * @date    11-November-2013
  * @brief   Header for main.c module
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#define BSIZE        512
#define FFTLEN       BSIZE*2
#define NUMFIRCOEFS  64
#define DIRECTFFT    0
#define INVERSEFFT   1
#define NOREVERSE    1
#define MAXPRESETS   14
#define true  1
#define false 0
#define __FPU_PRESENT 1

#ifndef TSC_I2C_PORT
 #define TSC_I2C_PORT    3              // I2C Port number
#endif

#define DAC_DHR12R2_ADDRESS  0x40007414
#define TSC_I2C_ADDR    0x41            // 7-bit I2C address
#define PF8_HI          GPIOF->BSRRL = 256
#define PF8_LO          GPIOF->BSRRH = 256

/* I2C Driver */
#define _I2C_Driver_(n)  Driver_I2C##n
#define  I2C_Driver_(n) _I2C_Driver_(n)
//extern ARM_DRIVER_I2C    I2C_Driver_(TSC_I2C_PORT);
#define ptrI2C           (&I2C_Driver_(TSC_I2C_PORT))


//typedef uint8_t    u8;
typedef enum {AM=0, LSB=1, USB=2, CW=3} Mode;
typedef enum {Fast, Slow}   Agctype;
typedef enum {Narrow, Wide} Bwidth;
typedef struct
        {
          char   name[16];
          float  freq;
          Mode   mode;
          Bwidth bw;
        } Presets;



/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx.h"
#include <stdio.h>
#include "stm32f429i_discovery.h"
#include "stm32f429i_discovery_lcd.h"

#include "stm32f429i_discovery_ioe.h"

//#include "Board_Touch.h"





#include "misc.h"
#include "system_stm32f4xx.h"
//#include "stm32f4xx_ll_fmc.h"
//#include "stm32f4xx_hal_def.h"
#include "core_cm4.h"
#include "stm32f429i_discovery.h"
#include "stm32f4xx_adc.h"
#include "stm32f4xx_dac.h"
#include "stm32f4xx_dma.h"
#include "stm32f4xx_tim.h"
#include "stm32f4xx_syscfg.h"
#include "stm32f4xx_exti.h"
//#include "stm32f4xx_hal_pwr.h"
//#include "stm32f4xx_hal_flash_ex.h"
#include "stm32f429i_discovery_lcd.h"
#include "stm32f429i_discovery_sdram.h"
//#include <WM.h>
//#include <BUTTON.h>




#include <arm_math.h>
//#include <arm_const_structs.h>
#include "SDR_math.h"
//#include "Board_LED.h"
//#include "Board_Buttons.h"
//#include "GUI.h"
//#include "DIALOG.h"
//#include "Driver_I2C.h"

#include "Globals.h"




#ifdef   INMAIN
  #include "FIRcoefs.h"hhhuu
#endif



/* Private define ------------------------------------------------------------*/
/* used to display the ADC converted value on LCD */
#define USE_LCD
  /* if you are not using the LCD, you can monitor the converted values by adding
     the variable "uhADCDualConvertedValue" to the debugger watch window */
     
/* Exported types ------------------------------------------------------------*/

#define WM_HWIN void *
#define H_WIN void *


#define myPI         3.14159265358979f
#define TWOPI        (2.f*myPI)
#define CWPITCH      650.f
#define SAMPLINGRATE 1785714.286f
#define RATEOUT      (SAMPLINGRATE/64)


#define hSTATION       (GUI_ID_USER + 0x02)
#define hVOL           (GUI_ID_USER + 0x05)
#define hFRADIO        (GUI_ID_USER + 0x06)
#define hFPLUS         (GUI_ID_USER + 0x03)
#define hFMINUS        (GUI_ID_USER + 0x04)
#define hMUTE          (GUI_ID_USER + 0x09)
#define hAM            (GUI_ID_USER + 0x0A)
#define hLSB           (GUI_ID_USER + 0x0B)
#define hUSB           (GUI_ID_USER + 0x0C)
#define hCW            (GUI_ID_USER + 0x0D)
#define hNARROW        (GUI_ID_USER + 0x0E)
#define hWIDE          (GUI_ID_USER + 0x0F)
#define hFAST          (GUI_ID_USER + 0x12)
#define hSLOW          (GUI_ID_USER + 0x13)
#define hFREQ          (GUI_ID_USER + 0x14)

#define AIRCR_VECTKEY_MASK ((uint32_t)0x05FA0000)
#define PriorityGroup_4    ((uint32_t)0x300) // 4 bits for pre-emption priority
                                             // 0 bits for subpriority



        /**
          * @brief  RCC PLL configuration structure definition
          */
        typedef struct
        {
          uint32_t PLLState;   /*!< The new state of the PLL.
                                    This parameter can be a value of @ref RCC_PLL_Config                      */

          uint32_t PLLSource;  /*!< RCC_PLLSource: PLL entry clock source.
                                    This parameter must be a value of @ref RCC_PLL_Clock_Source               */

          uint32_t PLLM;       /*!< PLLM: Division factor for PLL VCO input clock.
                                    This parameter must be a number between Min_Data = 0 and Max_Data = 63    */

          uint32_t PLLN;       /*!< PLLN: Multiplication factor for PLL VCO output clock.
                                    This parameter must be a number between Min_Data = 192 and Max_Data = 432 */

          uint32_t PLLP;       /*!< PLLP: Division factor for main system clock (SYSCLK).
                                    This parameter must be a value of @ref RCC_PLLP_Clock_Divider             */

          uint32_t PLLQ;       /*!< PLLQ: Division factor for OTG FS, SDIO and RNG clocks.
                                    This parameter must be a number between Min_Data = 0 and Max_Data = 63    */

        }RCC_PLLInitTypeDef;

        /**
          * @brief  RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) configuration structure definition
          */
        typedef struct
        {
          uint32_t OscillatorType;       /*!< The oscillators to be configured.
                                              This parameter can be a value of @ref RCC_Oscillator_Type                   */

          uint32_t HSEState;             /*!< The new state of the HSE.
                                              This parameter can be a value of @ref RCC_HSE_Config                        */

          uint32_t LSEState;             /*!< The new state of the LSE.
                                              This parameter can be a value of @ref RCC_LSE_Config                        */

          uint32_t HSIState;             /*!< The new state of the HSI.
                                              This parameter can be a value of @ref RCC_HSI_Config                        */

          uint32_t HSICalibrationValue;  /*!< The calibration trimming value.
                                              This parameter must be a number between Min_Data = 0x00 and Max_Data = 0x1F */

          uint32_t LSIState;             /*!< The new state of the LSI.
                                              This parameter can be a value of @ref RCC_LSI_Config                        */

          RCC_PLLInitTypeDef PLL;        /*!< PLL structure parameters                                                    */

        }RCC_OscInitTypeDef;

        /**
          * @brief  RCC System, AHB and APB busses clock configuration structure definition
          */
        typedef struct
        {
          uint32_t ClockType;             /*!< The clock to be configured.
                                               This parameter can be a value of @ref RCC_System_Clock_Type      */

          uint32_t SYSCLKSource;          /*!< The clock source (SYSCLKS) used as system clock.
                                               This parameter can be a value of @ref RCC_System_Clock_Source    */

          uint32_t AHBCLKDivider;         /*!< The AHB clock (HCLK) divider. This clock is derived from the system clock (SYSCLK).
                                               This parameter can be a value of @ref RCC_AHB_Clock_Source       */

          uint32_t APB1CLKDivider;        /*!< The APB1 clock (PCLK1) divider. This clock is derived from the AHB clock (HCLK).
                                               This parameter can be a value of @ref RCC_APB1_APB2_Clock_Source */

          uint32_t APB2CLKDivider;        /*!< The APB2 clock (PCLK2) divider. This clock is derived from the AHB clock (HCLK).
                                               This parameter can be a value of @ref RCC_APB1_APB2_Clock_Source */

        }RCC_ClkInitTypeDef;

        /* Exported constants --------------------------------------------------------*/
        /** @defgroup RCC_Exported_Constants
          * @{
          */

        /** @defgroup RCC_BitAddress_AliasRegion
          * @brief RCC registers bit address in the alias region
          * @{
          */
        #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
        /* --- CR Register ---*/
        /* Alias word address of HSION bit */
        #define RCC_CR_OFFSET             (RCC_OFFSET + 0x00)
        #define HSION_BitNumber           0x00
        #define CR_HSION_BB               (PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (HSION_BitNumber * 4))
        /* Alias word address of CSSON bit */
        #define CSSON_BitNumber           0x13
        #define CR_CSSON_BB               (PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (CSSON_BitNumber * 4))
        /* Alias word address of PLLON bit */
        #define PLLON_BitNumber           0x18
        #define CR_PLLON_BB               (PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (PLLON_BitNumber * 4))
        /* Alias word address of PLLI2SON bit */
        #define PLLI2SON_BitNumber        0x1A
        #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))

        /* --- CFGR Register ---*/
        /* Alias word address of I2SSRC bit */
        #define RCC_CFGR_OFFSET           (RCC_OFFSET + 0x08)
        #define I2SSRC_BitNumber          0x17
        #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))

        /* --- BDCR Register ---*/
        /* Alias word address of RTCEN bit */
        #define RCC_BDCR_OFFSET           (RCC_OFFSET + 0x70)
        #define RTCEN_BitNumber           0x0F
        #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (RCC_BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
        /* Alias word address of BDRST bit */
        #define BDRST_BitNumber           0x10
        #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (RCC_BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))

        /* --- CSR Register ---*/
        /* Alias word address of LSION bit */
        #define RCC_CSR_OFFSET            (RCC_OFFSET + 0x74)
        #define LSION_BitNumber           0x00
        #define CSR_LSION_BB              (PERIPH_BB_BASE + (RCC_CSR_OFFSET * 32) + (LSION_BitNumber * 4))

        /* CR register byte 3 (Bits[23:16]) base address */
        #define CR_BYTE2_ADDRESS          ((uint32_t)0x40023802)

        /* CIR register byte 2 (Bits[15:8]) base address */
        #define CIR_BYTE1_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))

        /* CIR register byte 3 (Bits[23:16]) base address */
        #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))

        /* BDCR register base address */
        #define BDCR_BYTE0_ADDRESS        (PERIPH_BASE + RCC_BDCR_OFFSET)


        #define DBP_TIMEOUT_VALUE          ((uint32_t)100)
        #define LSE_TIMEOUT_VALUE          ((uint32_t)5000)
        /**
          * @}
          */

        /** @defgroup RCC_Oscillator_Type
          * @{
          */
        #define RCC_OSCILLATORTYPE_NONE            ((uint32_t)0x00000000)
        #define RCC_OSCILLATORTYPE_HSE             ((uint32_t)0x00000001)
        #define RCC_OSCILLATORTYPE_HSI             ((uint32_t)0x00000002)
        #define RCC_OSCILLATORTYPE_LSE             ((uint32_t)0x00000004)
        #define RCC_OSCILLATORTYPE_LSI             ((uint32_t)0x00000008)

        #define IS_RCC_OSCILLATORTYPE(OSCILLATOR) ((OSCILLATOR) <= 15)
        /**
          * @}
          */

        /** @defgroup RCC_HSE_Config
          * @{
          */
        #define RCC_HSE_OFF                      ((uint8_t)0x00)
        #define RCC_HSE_ON                       ((uint8_t)0x01)
        #define RCC_HSE_BYPASS                   ((uint8_t)0x05)
/*
        #define IS_RCC_HSE(HSE) (((HSE) == RCC_HSE_OFF) || ((HSE) == RCC_HSE_ON) || \
                                 ((HSE) == RCC_HSE_BYPASS))
  */
        /**
          * @}
          */

        /** @defgroup RCC_LSE_Config
          * @{
          */
        #define RCC_LSE_OFF                      ((uint8_t)0x00)
        #define RCC_LSE_ON                       ((uint8_t)0x01)
        #define RCC_LSE_BYPASS                   ((uint8_t)0x05)

   /*
        #define IS_RCC_LSE(LSE) (((LSE) == RCC_LSE_OFF) || ((LSE) == RCC_LSE_ON) || \
                                 ((LSE) == RCC_LSE_BYPASS))
     */
        /**
          * @}
          */

        /** @defgroup RCC_HSI_Config
          * @{
          */
        #define RCC_HSI_OFF                      ((uint8_t)0x00)
        #define RCC_HSI_ON                       ((uint8_t)0x01)

        #define IS_RCC_HSI(HSI) (((HSI) == RCC_HSI_OFF) || ((HSI) == RCC_HSI_ON))
        /**
          * @}
          */

        /** @defgroup RCC_LSI_Config
          * @{
          */
        #define RCC_LSI_OFF                      ((uint8_t)0x00)
        #define RCC_LSI_ON                       ((uint8_t)0x01)

        #define IS_RCC_LSI(LSI) (((LSI) == RCC_LSI_OFF) || ((LSI) == RCC_LSI_ON))
        /**
          * @}
          */

        /** @defgroup RCC_PLL_Config
          * @{
          */
        #define RCC_PLL_NONE                      ((uint8_t)0x00)
        #define RCC_PLL_OFF                       ((uint8_t)0x01)
        #define RCC_PLL_ON                        ((uint8_t)0x02)

        #define IS_RCC_PLL(PLL) (((PLL) == RCC_PLL_NONE) ||((PLL) == RCC_PLL_OFF) || ((PLL) == RCC_PLL_ON))
        /**
          * @}
          */

        /** @defgroup RCC_PLLP_Clock_Divider
          * @{
          */
        #define RCC_PLLP_DIV2                  ((uint32_t)0x00000002)
        #define RCC_PLLP_DIV4                  ((uint32_t)0x00000004)
        #define RCC_PLLP_DIV6                  ((uint32_t)0x00000006)
        #define RCC_PLLP_DIV8                  ((uint32_t)0x00000008)
        /**
          * @}
          */

        /** @defgroup RCC_PLL_Clock_Source
          * @{
          */
        #define RCC_PLLSOURCE_HSI                RCC_PLLCFGR_PLLSRC_HSI
        #define RCC_PLLSOURCE_HSE                RCC_PLLCFGR_PLLSRC_HSE

        #define IS_RCC_PLLSOURCE(SOURCE) (((SOURCE) == RCC_PLLSOURCE_HSI) || \
                                          ((SOURCE) == RCC_PLLSOURCE_HSE))
        #define IS_RCC_PLLM_VALUE(VALUE) ((VALUE) <= 63)
        #define IS_RCC_PLLN_VALUE(VALUE) ((192 <= (VALUE)) && ((VALUE) <= 432))
        #define IS_RCC_PLLP_VALUE(VALUE) (((VALUE) == 2) || ((VALUE) == 4) || ((VALUE) == 6) || ((VALUE) == 8))
        #define IS_RCC_PLLQ_VALUE(VALUE) ((4 <= (VALUE)) && ((VALUE) <= 15))

        #define IS_RCC_PLLI2SN_VALUE(VALUE) ((192 <= (VALUE)) && ((VALUE) <= 432))
        #define IS_RCC_PLLI2SR_VALUE(VALUE) ((2 <= (VALUE)) && ((VALUE) <= 7))

        /**
          * @}
          */

        /** @defgroup RCC_System_Clock_Type
          * @{
          */
        #define RCC_CLOCKTYPE_SYSCLK             ((uint32_t)0x00000001)
        #define RCC_CLOCKTYPE_HCLK               ((uint32_t)0x00000002)
        #define RCC_CLOCKTYPE_PCLK1              ((uint32_t)0x00000004)
        #define RCC_CLOCKTYPE_PCLK2              ((uint32_t)0x00000008)

        #define IS_RCC_CLOCKTYPE(CLK) ((1 <= (CLK)) && ((CLK) <= 15))
        /**
          * @}
          */

        /** @defgroup RCC_System_Clock_Source
          * @{
          */
        #define RCC_SYSCLKSOURCE_HSI             RCC_CFGR_SW_HSI
        #define RCC_SYSCLKSOURCE_HSE             RCC_CFGR_SW_HSE
        #define RCC_SYSCLKSOURCE_PLLCLK          RCC_CFGR_SW_PLL

        #define IS_RCC_SYSCLKSOURCE(SOURCE) (((SOURCE) == RCC_SYSCLKSOURCE_HSI) || \
                                             ((SOURCE) == RCC_SYSCLKSOURCE_HSE) || \
                                             ((SOURCE) == RCC_SYSCLKSOURCE_PLLCLK))
        /**
          * @}
          */

        /** @defgroup RCC_AHB_Clock_Source
          * @{
          */
        #define RCC_SYSCLK_DIV1                  RCC_CFGR_HPRE_DIV1
        #define RCC_SYSCLK_DIV2                  RCC_CFGR_HPRE_DIV2
        #define RCC_SYSCLK_DIV4                  RCC_CFGR_HPRE_DIV4
        #define RCC_SYSCLK_DIV8                  RCC_CFGR_HPRE_DIV8
        #define RCC_SYSCLK_DIV16                 RCC_CFGR_HPRE_DIV16
        #define RCC_SYSCLK_DIV64                 RCC_CFGR_HPRE_DIV64
        #define RCC_SYSCLK_DIV128                RCC_CFGR_HPRE_DIV128
        #define RCC_SYSCLK_DIV256                RCC_CFGR_HPRE_DIV256
        #define RCC_SYSCLK_DIV512                RCC_CFGR_HPRE_DIV512

        /*
        #define IS_RCC_HCLK(HCLK) (((HCLK) == RCC_SYSCLK_DIV1)   || ((HCLK) == RCC_SYSCLK_DIV2)   || \
                                   ((HCLK) == RCC_SYSCLK_DIV4)   || ((HCLK) == RCC_SYSCLK_DIV8)   || \
                                   ((HCLK) == RCC_SYSCLK_DIV16)  || ((HCLK) == RCC_SYSCLK_DIV64)  || \
                                   ((HCLK) == RCC_SYSCLK_DIV128) || ((HCLK) == RCC_SYSCLK_DIV256) || \
                                   ((HCLK) == RCC_SYSCLK_DIV512))
        */

        /**
          * @}
          */

        /** @defgroup RCC_APB1_APB2_Clock_Source
          * @{
          */
        #define RCC_HCLK_DIV1                    RCC_CFGR_PPRE1_DIV1
        #define RCC_HCLK_DIV2                    RCC_CFGR_PPRE1_DIV2
        #define RCC_HCLK_DIV4                    RCC_CFGR_PPRE1_DIV4
        #define RCC_HCLK_DIV8                    RCC_CFGR_PPRE1_DIV8
        #define RCC_HCLK_DIV16                   RCC_CFGR_PPRE1_DIV16

        /*
        #define IS_RCC_PCLK(PCLK) (((PCLK) == RCC_HCLK_DIV1) || ((PCLK) == RCC_HCLK_DIV2) || \
                                   ((PCLK) == RCC_HCLK_DIV4) || ((PCLK) == RCC_HCLK_DIV8) || \
                                   ((PCLK) == RCC_HCLK_DIV16))

        */
        /**
          * @}
          */

        /** @defgroup RCC_RTC_Clock_Source
          * @{
          */
        #define RCC_RTCCLKSOURCE_LSE             ((uint32_t)0x00000100)
        #define RCC_RTCCLKSOURCE_LSI             ((uint32_t)0x00000200)
        #define RCC_RTCCLKSOURCE_HSE_DIV2        ((uint32_t)0x00020300)
        #define RCC_RTCCLKSOURCE_HSE_DIV3        ((uint32_t)0x00030300)
        #define RCC_RTCCLKSOURCE_HSE_DIV4        ((uint32_t)0x00040300)
        #define RCC_RTCCLKSOURCE_HSE_DIV5        ((uint32_t)0x00050300)
        #define RCC_RTCCLKSOURCE_HSE_DIV6        ((uint32_t)0x00060300)
        #define RCC_RTCCLKSOURCE_HSE_DIV7        ((uint32_t)0x00070300)
        #define RCC_RTCCLKSOURCE_HSE_DIV8        ((uint32_t)0x00080300)
        #define RCC_RTCCLKSOURCE_HSE_DIV9        ((uint32_t)0x00090300)
        #define RCC_RTCCLKSOURCE_HSE_DIV10       ((uint32_t)0x000A0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV11       ((uint32_t)0x000B0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV12       ((uint32_t)0x000C0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV13       ((uint32_t)0x000D0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV14       ((uint32_t)0x000E0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV15       ((uint32_t)0x000F0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV16       ((uint32_t)0x00100300)
        #define RCC_RTCCLKSOURCE_HSE_DIV17       ((uint32_t)0x00110300)
        #define RCC_RTCCLKSOURCE_HSE_DIV18       ((uint32_t)0x00120300)
        #define RCC_RTCCLKSOURCE_HSE_DIV19       ((uint32_t)0x00130300)
        #define RCC_RTCCLKSOURCE_HSE_DIV20       ((uint32_t)0x00140300)
        #define RCC_RTCCLKSOURCE_HSE_DIV21       ((uint32_t)0x00150300)
        #define RCC_RTCCLKSOURCE_HSE_DIV22       ((uint32_t)0x00160300)
        #define RCC_RTCCLKSOURCE_HSE_DIV23       ((uint32_t)0x00170300)
        #define RCC_RTCCLKSOURCE_HSE_DIV24       ((uint32_t)0x00180300)
        #define RCC_RTCCLKSOURCE_HSE_DIV25       ((uint32_t)0x00190300)
        #define RCC_RTCCLKSOURCE_HSE_DIV26       ((uint32_t)0x001A0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV27       ((uint32_t)0x001B0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV28       ((uint32_t)0x001C0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV29       ((uint32_t)0x001D0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV30       ((uint32_t)0x001E0300)
        #define RCC_RTCCLKSOURCE_HSE_DIV31       ((uint32_t)0x001F0300)
        /**
          * @}
          */

        /** @defgroup RCC_I2S_Clock_Source
          * @{
          */
        #define RCC_I2SCLKSOURCE_PLLI2S         ((uint32_t)0x00000000)
        #define RCC_I2SCLKSOURCE_EXT            ((uint32_t)0x00000001)
        /**
          * @}
          */

        /** @defgroup RCC_MCO_Index
          * @{
          */
        #define RCC_MCO1                         ((uint32_t)0x00000000)
        #define RCC_MCO2                         ((uint32_t)0x00000001)

        #define IS_RCC_MCO(MCOx) (((MCOx) == RCC_MCO1) || ((MCOx) == RCC_MCO2))
        /**
          * @}
          */

        /** @defgroup RCC_MCO1_Clock_Source
          * @{
          */
        #define RCC_MCO1SOURCE_HSI               ((uint32_t)0x00000000)
        #define RCC_MCO1SOURCE_LSE               RCC_CFGR_MCO1_0
        #define RCC_MCO1SOURCE_HSE               RCC_CFGR_MCO1_1
        #define RCC_MCO1SOURCE_PLLCLK            RCC_CFGR_MCO1
/*
        #define IS_RCC_MCO1SOURCE(SOURCE) (((SOURCE) == RCC_MCO1SOURCE_HSI) || ((SOURCE) == RCC_MCO1SOURCE_LSE) || \
                                           ((SOURCE) == RCC_MCO1SOURCE_HSE) || ((SOURCE) == RCC_MCO1SOURCE_PLLCLK))
  */
        /**
          * @}
          */

        /** @defgroup RCC_MCO2_Clock_Source
          * @{
          */
        #define RCC_MCO2SOURCE_SYSCLK            ((uint32_t)0x00000000)
        #define RCC_MCO2SOURCE_PLLI2SCLK         RCC_CFGR_MCO2_0
        #define RCC_MCO2SOURCE_HSE               RCC_CFGR_MCO2_1
        #define RCC_MCO2SOURCE_PLLCLK            RCC_CFGR_MCO2

        /*
        #define IS_RCC_MCO2SOURCE(SOURCE) (((SOURCE) == RCC_MCO2SOURCE_SYSCLK) || ((SOURCE) == RCC_MCO2SOURCE_PLLI2SCLK)|| \
                                           ((SOURCE) == RCC_MCO2SOURCE_HSE)    || ((SOURCE) == RCC_MCO2SOURCE_PLLCLK))
        */
        /**
          * @}
          */

        /** @defgroup RCC_MCOx_Clock_Prescaler
          * @{
          */
        #define RCC_MCODIV_1                    ((uint32_t)0x00000000)
        #define RCC_MCODIV_2                    RCC_CFGR_MCO1PRE_2
        #define RCC_MCODIV_3                    ((uint32_t)RCC_CFGR_MCO1PRE_0 | RCC_CFGR_MCO1PRE_2)
        #define RCC_MCODIV_4                    ((uint32_t)RCC_CFGR_MCO1PRE_1 | RCC_CFGR_MCO1PRE_2)
        #define RCC_MCODIV_5                    RCC_CFGR_MCO1PRE

        #define IS_RCC_MCODIV(DIV) (((DIV) == RCC_MCODIV_1)  || ((DIV) == RCC_MCODIV_2) || \
                                     ((DIV) == RCC_MCODIV_3) || ((DIV) == RCC_MCODIV_4) || \
                                     ((DIV) == RCC_MCODIV_5))
        /**
          * @}
          */

        /** @defgroup RCC_Interrupt
          * @{
          */
        #define RCC_IT_LSIRDY                    ((uint8_t)0x01)
        #define RCC_IT_LSERDY                    ((uint8_t)0x02)
        #define RCC_IT_HSIRDY                    ((uint8_t)0x04)
        #define RCC_IT_HSERDY                    ((uint8_t)0x08)
        #define RCC_IT_PLLRDY                    ((uint8_t)0x10)
        #define RCC_IT_PLLI2SRDY                 ((uint8_t)0x20)
        #define RCC_IT_CSS                       ((uint8_t)0x80)
        /**
          * @}
          */

        /** @defgroup RCC_Flag
          *        Elements values convention: 0XXYYYYYb
          *           - YYYYY  : Flag position in the register
          *           - 0XX  : Register index
          *                 - 01: CR register
          *                 - 10: BDCR register
          *                 - 11: CSR register
          * @{
          */
        /* Flags in the CR register */
        #define RCC_FLAG_HSIRDY                  ((uint8_t)0x21)
        #define RCC_FLAG_HSERDY                  ((uint8_t)0x31)
        #define RCC_FLAG_PLLRDY                  ((uint8_t)0x39)
        #define RCC_FLAG_PLLI2SRDY               ((uint8_t)0x3B)

        /* Flags in the BDCR register */
        #define RCC_FLAG_LSERDY                  ((uint8_t)0x41)

        /* Flags in the CSR register */
        #define RCC_FLAG_LSIRDY                  ((uint8_t)0x61)
        #define RCC_FLAG_BORRST                  ((uint8_t)0x79)
        #define RCC_FLAG_PINRST                  ((uint8_t)0x7A)
        #define RCC_FLAG_PORRST                  ((uint8_t)0x7B)
        #define RCC_FLAG_SFTRST                  ((uint8_t)0x7C)
        #define RCC_FLAG_IWDGRST                 ((uint8_t)0x7D)
        #define RCC_FLAG_WWDGRST                 ((uint8_t)0x7E)
        #define RCC_FLAG_LPWRRST                 ((uint8_t)0x7F)

        #define IS_RCC_CALIBRATION_VALUE(VALUE) ((VALUE) <= 0x1F)
        /**
          * @}
          */



        /** @brief  Enable or disable the AHB1 peripheral clock.
          * @note   After reset, the peripheral clock (used for registers read/write access)
          *         is disabled and the application software has to enable this clock before
          *         using it.
          */
        #define __GPIOA_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN))
        #define __GPIOB_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN))
        #define __GPIOC_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN))
        #define __GPIOD_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN))
        #define __GPIOE_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN))
        #define __GPIOH_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN))
        #define __CRC_CLK_ENABLE()           (RCC->AHB1ENR |= (RCC_AHB1ENR_CRCEN))
        #define __BKPSRAM_CLK_ENABLE()       (RCC->AHB1ENR |= (RCC_AHB1ENR_BKPSRAMEN))
        #define __CCMDATARAMEN_CLK_ENABLE()  (RCC->AHB1ENR |= (RCC_AHB1ENR_CCMDATARAMEN))
        #define __DMA1_CLK_ENABLE()          (RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN))
        #define __DMA2_CLK_ENABLE()          (RCC->AHB1ENR |= (RCC_AHB1ENR_DMA2EN))

        #define __GPIOA_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN))
        #define __GPIOB_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOBEN))
        #define __GPIOC_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOCEN))
        #define __GPIOD_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIODEN))
        #define __GPIOE_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOEEN))
        #define __GPIOH_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOHEN))
        #define __CRC_CLK_DISABLE()          (RCC->AHB1ENR &= ~(RCC_AHB1ENR_CRCEN))
        #define __BKPSRAM_CLK_DISABLE()      (RCC->AHB1ENR &= ~(RCC_AHB1ENR_BKPSRAMEN))
        #define __CCMDATARAMEN_CLK_DISABLE() (RCC->AHB1ENR &= ~(RCC_AHB1ENR_CCMDATARAMEN))
        #define __DMA1_CLK_DISABLE()         (RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA1EN))
        #define __DMA2_CLK_DISABLE()         (RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA2EN))

      #define __GPIOI_CLK_ENABLE()            (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOIEN))
      #define __GPIOF_CLK_ENABLE()            (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOFEN))
      #define __GPIOG_CLK_ENABLE()            (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOGEN))
      #define __GPIOJ_CLK_ENABLE()            (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOJEN))
      #define __GPIOK_CLK_ENABLE()            (RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOKEN))
      #define __DMA2D_CLK_ENABLE()            (RCC->AHB1ENR |= (RCC_AHB1ENR_DMA2DEN))
      #define __ETHMAC_CLK_ENABLE()           (RCC->AHB1ENR |= (RCC_AHB1ENR_ETHMACEN))
      #define __ETHMACTX_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_ETHMACTXEN))
      #define __ETHMACRX_CLK_ENABLE()         (RCC->AHB1ENR |= (RCC_AHB1ENR_ETHMACRXEN))
      #define __ETHMACPTP_CLK_ENABLE()        (RCC->AHB1ENR |= (RCC_AHB1ENR_ETHMACPTPEN))
      #define __USB_OTG_HS_CLK_ENABLE()       (RCC->AHB1ENR |= (RCC_AHB1ENR_OTGHSEN))
      #define __USB_OTG_HS_ULPI_CLK_ENABLE()  (RCC->AHB1ENR |= (RCC_AHB1ENR_OTGHSULPIEN))

      #define __GPIOF_CLK_DISABLE()           (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOFEN))
      #define __GPIOG_CLK_DISABLE()           (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOGEN))
      #define __GPIOI_CLK_DISABLE()           (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOIEN))
      #define __GPIOJ_CLK_DISABLE()           (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOJEN))
      #define __GPIOK_CLK_DISABLE()           (RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOKEN))
      #define __DMA2D_CLK_DISABLE()           (RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA2DEN))
      #define __ETHMAC_CLK_DISABLE()          (RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACEN))
      #define __ETHMACTX_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACTXEN))
      #define __ETHMACRX_CLK_DISABLE()        (RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACRXEN))
      #define __ETHMACPTP_CLK_DISABLE()       (RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACPTPEN))
      #define __USB_OTG_HS_CLK_DISABLE()      (RCC->AHB1ENR &= ~(RCC_AHB1ENR_OTGHSEN))
      #define __USB_OTG_HS_ULPI_CLK_DISABLE() (RCC->AHB1ENR &= ~(RCC_AHB1ENR_OTGHSULPIEN))




        /**
          * @brief   GPIO Init structure definition
          */
        typedef struct
        {
          uint32_t GPIO_Pin;              /*!< Specifies the GPIO pins to be configured.
                                               This parameter can be any value of @ref GPIO_pins_define */

          GPIOMode_TypeDef GPIO_Mode;     /*!< Specifies the operating mode for the selected pins.
                                               This parameter can be a value of @ref GPIOMode_TypeDef */

          GPIOSpeed_TypeDef GPIO_Speed;   /*!< Specifies the speed for the selected pins.
                                               This parameter can be a value of @ref GPIOSpeed_TypeDef */

          GPIOOType_TypeDef GPIO_OType;   /*!< Specifies the operating output type for the selected pins.
                                               This parameter can be a value of @ref GPIOOType_TypeDef */

          GPIOPuPd_TypeDef GPIO_PuPd;     /*!< Specifies the operating Pull-up/Pull down for the selected pins.
                                               This parameter can be a value of @ref GPIOPuPd_TypeDef */
        } SDR_GPIO_InitTypeDef;



typedef struct
{
  uint32_t ADC_Resolution;                /*!< Configures the ADC resolution dual mode.
                                               This parameter can be a value of @ref ADC_resolution */
  FunctionalState ADC_ScanConvMode;       /*!< Specifies whether the conversion
                                               is performed in Scan (multichannels)
                                               or Single (one channel) mode.
                                               This parameter can be set to ENABLE or DISABLE */
  FunctionalState ADC_ContinuousConvMode; /*!< Specifies whether the conversion
                                               is performed in Continuous or Single mode.
                                               This parameter can be set to ENABLE or DISABLE. */
  uint32_t ADC_ExternalTrigConvEdge;      /*!< Select the external trigger edge and
                                               enable the trigger of a regular group.
                                               This parameter can be a value of
                                               @ref ADC_external_trigger_edge_for_regular_channels_conversion */
  uint32_t ADC_ExternalTrigConv;          /*!< Select the external event used to trigger
                                               the start of conversion of a regular group.
                                               This parameter can be a value of
                                               @ref ADC_extrenal_trigger_sources_for_regular_channels_conversion */
  uint32_t ADC_DataAlign;                 /*!< Specifies whether the ADC data  alignment
                                               is left or right. This parameter can be
                                               a value of @ref ADC_data_align */
  uint8_t  ADC_NbrOfConversion;           /*!< Specifies the number of ADC conversions
                                               that will be done using the sequencer for
                                               regular channel group.
                                               This parameter must range from 1 to 16. */
}SDR_ADC_InitTypeDef;


/**
  * @brief  DMA Init structure definition
  */

typedef struct
{
  uint32_t DMA_Channel;            /*!< Specifies the channel used for the specified stream.
                                        This parameter can be a value of @ref DMA_channel */

  uint32_t DMA_PeripheralBaseAddr; /*!< Specifies the peripheral base address for DMAy Streamx. */

  uint32_t DMA_Memory0BaseAddr;    /*!< Specifies the memory 0 base address for DMAy Streamx.
                                        This memory is the default memory used when double buffer mode is
                                        not enabled. */

  uint32_t DMA_DIR;                /*!< Specifies if the data will be transferred from memory to peripheral,
                                        from memory to memory or from peripheral to memory.
                                        This parameter can be a value of @ref DMA_data_transfer_direction */

  uint32_t DMA_BufferSize;         /*!< Specifies the buffer size, in data unit, of the specified Stream.
                                        The data unit is equal to the configuration set in DMA_PeripheralDataSize
                                        or DMA_MemoryDataSize members depending in the transfer direction. */

  uint32_t DMA_PeripheralInc;      /*!< Specifies whether the Peripheral address register should be incremented or not.
                                        This parameter can be a value of @ref DMA_peripheral_incremented_mode */

  uint32_t DMA_MemoryInc;          /*!< Specifies whether the memory address register should be incremented or not.
                                        This parameter can be a value of @ref DMA_memory_incremented_mode */

  uint32_t DMA_PeripheralDataSize; /*!< Specifies the Peripheral data width.
                                        This parameter can be a value of @ref DMA_peripheral_data_size */

  uint32_t DMA_MemoryDataSize;     /*!< Specifies the Memory data width.
                                        This parameter can be a value of @ref DMA_memory_data_size */

  uint32_t DMA_Mode;               /*!< Specifies the operation mode of the DMAy Streamx.
                                        This parameter can be a value of @ref DMA_circular_normal_mode
                                        @note The circular buffer mode cannot be used if the memory-to-memory
                                              data transfer is configured on the selected Stream */

  uint32_t DMA_Priority;           /*!< Specifies the software priority for the DMAy Streamx.
                                        This parameter can be a value of @ref DMA_priority_level */

  uint32_t DMA_FIFOMode;          /*!< Specifies if the FIFO mode or Direct mode will be used for the specified Stream.
                                        This parameter can be a value of @ref DMA_fifo_direct_mode
                                        @note The Direct mode (FIFO mode disabled) cannot be used if the
                                               memory-to-memory data transfer is configured on the selected Stream */

  uint32_t DMA_FIFOThreshold;      /*!< Specifies the FIFO threshold level.
                                        This parameter can be a value of @ref DMA_fifo_threshold_level */

  uint32_t DMA_MemoryBurst;        /*!< Specifies the Burst transfer configuration for the memory transfers.
                                        It specifies the amount of data to be transferred in a single non interruptable
                                        transaction. This parameter can be a value of @ref DMA_memory_burst
                                        @note The burst mode is possible only if the address Increment mode is enabled. */

  uint32_t DMA_PeripheralBurst;    /*!< Specifies the Burst transfer configuration for the peripheral transfers.
                                        It specifies the amount of data to be transferred in a single non interruptable
                                        transaction. This parameter can be a value of @ref DMA_peripheral_burst
                                        @note The burst mode is possible only if the address Increment mode is enabled. */
} SDR_DMA_InitTypeDef;


/* Exported constants --------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/ 
  #define ADC_CHANNEL              ADC_Channel_13
  #define ADC1_2_CHANNEL_GPIO_CLK  RCC_AHB1Periph_GPIOC
  #define GPIO_PIN                 GPIO_Pin_3
  #define GPIO_PORT                GPIOC
  #define DMA_CHANNELx             DMA_Channel_0
  #define DMA_STREAMx              DMA2_Stream4
  #define ADC_CDR_ADDRESS          ((uint32_t)0x40012308)

/* Exported functions ------------------------------------------------------- */



extern void Set_NVIC_PriorityGroupConfig(uint32_t PriorityGroup);
extern void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);
void SDR_ADC_StructInit(SDR_ADC_InitTypeDef* ADC_InitStruct);
void SDR_ADC_Init(ADC_TypeDef* ADCx, SDR_ADC_InitTypeDef* ADC_InitStruct);
extern void Set_NVIC_PriorityGroupConfig(uint32_t PriorityGroup);
extern void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);
extern void SDR_ADC_Init(ADC_TypeDef* ADCx, SDR_ADC_InitTypeDef* ADC_InitStruct);

extern void SDR_InitGPIO(void);
extern void SDR_InitEXTI(void);
extern void SDR_InitDAC(void);
extern void SDR_InitADC(void);
extern void SDR_StartADC(void);
extern void SDR_InitEXTI(void);
extern void Tune_Preset(u8);
extern void Load_Presets(void);
extern void DisplayFrequency(void);
extern void SetFstep(int);
extern void FminusClicked(void);
extern void FplusClicked(void);
extern void SetAGC(Agctype);
extern void SetBW(Bwidth);
extern void SetMode(Mode);


#endif /* __MAIN_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
